<?php

/**
 * @file
 * Module file for USDA eAuth.
 */

use Drupal\usda_eauth\UserLoginBlock;
use Drupal\user\UserInterface;

/**
 * Implements hook_openid_connect_post_authorize().
 */
function usda_eauth_openid_connect_post_authorize(UserInterface $account, array $context) {

  // Get the zRoles utility service.
  /** @var \Drupal\usda_eauth\zRolesUtilitiesInterface $zroles_util */
  $zroles_util = \Drupal::service('usda_eauth.zroles');

  // eAuthId should be in $context['sub'].
  $eAuthId = $context['sub'];

  // Get the zRoles based on the eAuthID.
  try {
    $response = $zroles_util->getUserAccessRolesAndScopes($eAuthId);
  }

  // If the request to zRoles fails, logout and show an error.
  catch (Exception $e) {
    $session = \Drupal::request()->getSession();
    $session->set('openid_connect_destination', '/user/logout');
    \Drupal::messenger()->addError('Could not retrieve user info from zRoles. Please contact an administrator.');
    watchdog_exception('usda_eauth', $e, 'zRoles request failed.');
    return;
  }

  // Get the user info from zRoles response.
  $email = $zroles_util->getTokenValue($response, 'EmailAddress');
  $firstName = $zroles_util->getTokenValue($response, 'FirstName');
  $lastName = $zroles_util->getTokenValue($response, 'LastName');
  $roleId = $zroles_util->getTokenValue($response, 'ApplicationRoleId');
  $roleName = $zroles_util->getTokenValue($response, 'ApplicationRoleName');
  $roleEnum = $zroles_util->getTokenValue($response, 'ApplicationRoleEnumeration');
  $roleDisplay = $zroles_util->getTokenValue($response, 'ApplicationRoleDisplay');

  // Store the user info in the session.
  $session = \Drupal::request()->getSession();
  $session->set('eAuthId', $eAuthId);
  $session->set('EmailAddress', $email);
  $session->set('FirstName', $firstName);
  $session->set('LastName', $lastName);
  $session->set('ApplicationRoleId', $roleId);
  $session->set('ApplicationRoleName', $roleName);
  $session->set('ApplicationRoleEnumeration', $roleEnum);
  $session->set('ApplicationRoleDisplay', $roleDisplay);

  // Set the account username and email address, if available.
  if (!empty($email)) {
    $account->setUsername($email);
    $account->setEmail($email);
    $account->save();
  }

  // Redirect to the proper route based on role.
  $destination = NULL;
  switch ($roleEnum) {
    case 'CIG_App_Admin':
    case 'CIG_APA':
      $destination = '/pods_admin_dashboard';
      break;
    case 'CIG_NSHDS':
    case 'CIG_NCDS':
    case 'CIG_APT':
      $destination = '/pods_awardee_dashboard';
      break;
  }
  if (!empty($destination)) {
    $session->set('openid_connect_destination', $destination);
  }
}

/**
 * Implements hook_openid_connect_userinfo_alter().
 */
function usda_eauth_openid_connect_userinfo_alter(&$userinfo, array $context) {

  // If an email address isn't set, generate one automatically from the
  // eAuth ID and hostname.
  if (empty($userinfo['email'])) {
    $host = \Drupal::request()->getHost();
    $eauth_id = $context['user_data']['sub'];
    if (empty($eauth_id)) {
      return $userinfo;
    }
    $userinfo['email'] = $eauth_id . '@' . $host;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function usda_eauth_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {

  // Remove the "Reset your password" link from user login block.
  if ($block->getBaseId() === 'user_login_block') {
    $build['#pre_render'][] = [UserLoginBlock::class, 'preRender'];
  }
}
